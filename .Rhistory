xhar <- abind(xhar,x,along=3)
phar <- abind(phar,p,along=3)
x0 <- x1
p0 <- p1
}
p0%*%t(H)
dim(p0%*%t(H))
dim(solve(s))
x0 <- matrix(c(0,0),2,1)        # aprior we start at 0,0
p0 <- matrix(c(0,0,0,0),2,2)    # since we are sure of this, our initial cov estimates are zero too
xhar <- array(x0,dim=c(2,1,1))
phar <- array(p0,dim=c(2,2,1))
for (i in 1:n){
print(i)
# predict
y <- zar[i] - H%*%xar[,i]
s <- sigmes + H%*%p0%*%t(H)
k <- p0%*%t(H)%*%solve(s)
x1 <- x0 + k*y
p1 <- p0 - k%*%H%*%p0
yhat <- zar[i] - H%*%x1
x <- array(x1,dim=c(2,1,1))
p <- array(p1,dim=c(2,2,1))
xhar <- abind(xhar,x,along=3)
phar <- abind(phar,p,along=3)
x0 <- x1
p0 <- p1
}
k
dim(k)
y
x0 <- matrix(c(0,0),2,1)        # aprior we start at 0,0
p0 <- matrix(c(0,0,0,0),2,2)    # since we are sure of this, our initial cov estimates are zero too
xhar <- array(x0,dim=c(2,1,1))
phar <- array(p0,dim=c(2,2,1))
for (i in 1:n){
print(i)
# predict
y <- zar[i] - H%*%xar[,i]
s <- sigmes + H%*%p0%*%t(H)
k <- p0%*%t(H)%*%solve(s)
x1 <- x0 + k%*%y
p1 <- p0 - k%*%H%*%p0
yhat <- zar[i] - H%*%x1
x <- array(x1,dim=c(2,1,1))
p <- array(p1,dim=c(2,2,1))
xhar <- abind(xhar,x,along=3)
phar <- abind(phar,p,along=3)
x0 <- x1
p0 <- p1
}
xm$xhat <- xar[1,]
par(mfrow=c(3,1))
plot(a,type="l",main="Acceleration",col="red")
plot(xm$v,type="l",main="Velocity",col="green")
plot(xm$x,type="l",main="Position",col="blue")
lines(xm$xhat,col="red")
points(xm$xm,col="purple")
x0 <- matrix(c(0,0),2,1)        # aprior we start at 0,0
p0 <- matrix(c(0,0,0,0),2,2)    # since we are sure of this, our initial cov estimates are zero too
xhar <- array(x0,dim=c(2,1,1))
phar <- array(p0,dim=c(2,2,1))
for (i in 1:n){
# Predict
y <- zar[i] - H%*%xar[,i]
s <- sigmes + H%*%p0%*%t(H)
# Update
k <- p0%*%t(H)%*%solve(s)
x1 <- x0 + k%*%y
p1 <- p0 - k%*%H%*%p0
yhat <- zar[i] - H%*%x1
# Squirel them away
x <- array(x1,dim=c(2,1,1))
p <- array(p1,dim=c(2,2,1))
xhar <- abind(xhar,x,along=3)
phar <- abind(phar,p,along=3)
x0 <- x1
p0 <- p1
}
plot(t,xm$x,type="l",main="Position",col="blue")
points(t,xm$z,col="purple")
legx <- 0
legy <- (min(xm$x)+max(xm$x))/2
legend(legx,legy, legend=c("True", "Measured"), col=c("blue", "purple"), lty=1:2, cex=0.8)
plot(t,xm$z,type="p",main="Position",col="purple")
lines(t,xm$x,col="blue")
legx <- 0
legy <- (min(xm$x)+max(xm$x))/2
legend(legx,legy, legend=c("True", "Measured"), col=c("blue", "purple"), lty=1:2, cex=0.8)
xm$predx <- x[1,]
xm$predx <- xhar[1,]
xhar
dim(xhar)
xm$predx <- xhar[1,1,]
xm$predx <- xhar[1,1,1:n]
plot(t,xm$z,type="p",main="Position",col="purple")
lines(t,xm$x,col="blue")
lines(t,xm$predx,col="red")
legx <- 0
legy <- (min(xm$x)+max(xm$x))/2
legend(legx,legy, legend=c("True", "Measured"), col=c("blue", "purple"), lty=1:2, cex=0.8)
xhar
print(zar)
Q
H
xar
H%*%xar[,2]
H%*%xar[,6]
H%*%xar[,20]
knitr::opts_chunk$set(echo = TRUE)
# hook_output <- knitr::knit_hooks$get("output")
#
# knitr::knit_hooks$set(output=function(x,options){
#   xn <- hook_output(x,options)
#   # interestingly xn is a big character string.
#   # I had expected a list or vector, but the length of x is 1 and the class is character.
#
#   # The following regexp extracts the parameters from a statement of the form
#   # htmlesc<<(pat1,pat2)>> and converts it to <pat1>pat2</pat1>
#   xn <- gsub("## htmlesc<<([^,]*),{1}([^>>]*)>>","\n```\n<\\1>\\2</\\1>\n```\n",xn)
#   # now remove double escaped lines that occur when we do these right after each other
#   gsub(">\n```\n\n\n```\n<",">\n<",xn)
# }
# )
# options(width=200)
library(tidyverse)
library(abind)
set.seed(1234)
# Acceleration is normally distributed with mean macc and stdev sigacc
macc <- 0
sigacc <- 0.1
# Measurement error is Acceleration is normally distributed with mean mmes and stdev sigmes
mmes <- 0
sigmes <- 10.
# Time step is 0.1 secs
dt <- 0.2
G <- c(0.5*dt^2,dt)
Q <- G %*% t(G) * sigacc^2
F <- matrix(c(1,0,dt,1),2,2)
H <- t(as.matrix(c(1,0)))
n <- 1000
x <- 0
v <- 0
a <- rnorm(n,macc,sigacc)
for (i in 1:(n-1)){
curx <- x[i]
curv <- v[i]
cxv <- c(curx,curv)
nxv <- F %*% cxv +G * a[i]
x <- c(x,nxv[1])
v <- c(v,nxv[2])
}
#print(x)
#print(v)
xar <- t(matrix(c(x,v),n,2)) # hidden state
#print(xar)
v <- rnorm(n,mmes,sigmes)  # measurment noise
zar <- H%*%xar + v         # visible state
t <- (0:(n-1))*dt
xm <- data.frame(t=t,x=xar[1,],v=xar[2,],z=zar[1,])
par(mfrow=c(3,1))
plot(t,a,type="l",main="Acceleration",col="red")
plot(t,xm$v,type="l",main="Velocity",col="green")
plot(t,xm$z,type="p",main="Position",col="pink")
lines(t,xm$x,col="purple")
legx <- 0
legy <- (min(xm$x)+max(xm$x))/2
legend(legx,legy, legend=c("True", "Measured"), col=c("blue", "pink"), lty=1:2, cex=0.8)
x0 <- matrix(c(0,0),2,1)        # aprior we start at 0,0
p0 <- matrix(c(0,0,0,0),2,2)    # since we are sure of this, our initial cov estimates are zero too
xhar <- array(x0,dim=c(2,1,1))
phar <- array(p0,dim=c(2,2,1))
iv <- 0
ivhat <- 0
for (i in 1:n){
x0 <- F%*%xhar[,1,i]
y <- zar[i] - H%*%xhar[,1,i]
iv <- c(iv,y)
s <- sigmes + H%*%p0%*%t(H)
p0 <- F%*%p0%*%t(F) + Q
# Update
k <- p0%*%t(H)%*%solve(s)
x1 <- x0 + k%*%y
p1 <- p0 - k%*%H%*%p0
yhat <- zar[i] - H%*%x1
ivhat <-  c(ivhat,y)
# Squirel them away
x <- array(x1,dim=c(2,1,1))
p <- array(p1,dim=c(2,2,1))
xhar <- abind(xhar,x,along=3)
phar <- abind(phar,p,along=3)
x0 <- x1
p0 <- p1
}
xm$predx <- xhar[1,1,1:n]
xm$iv <- iv[1:n]
xm$ivhat <- ivhat[1:n]
plot(t,xm$z,type="p",main="Position",col="pink")
lines(t,xm$x,col="blue")
lines(t,xm$predx,col="darkgreen")
#lines(t,xm$iv,col="brown")
legx <- 0
legy <- (min(xm$x)+max(xm$x))/2
legend(legx,legy, legend=c("True", "Measured","Best Guess"), col=c("blue", "pink","darkgreen"), lty=c(1,2,1), cex=0.8)
knitr::opts_chunk$set(echo = TRUE)
# hook_output <- knitr::knit_hooks$get("output")
#
# knitr::knit_hooks$set(output=function(x,options){
#   xn <- hook_output(x,options)
#   # interestingly xn is a big character string.
#   # I had expected a list or vector, but the length of x is 1 and the class is character.
#
#   # The following regexp extracts the parameters from a statement of the form
#   # htmlesc<<(pat1,pat2)>> and converts it to <pat1>pat2</pat1>
#   xn <- gsub("## htmlesc<<([^,]*),{1}([^>>]*)>>","\n```\n<\\1>\\2</\\1>\n```\n",xn)
#   # now remove double escaped lines that occur when we do these right after each other
#   gsub(">\n```\n\n\n```\n<",">\n<",xn)
# }
# )
# options(width=200)
library(tidyverse)
library(abind)
set.seed(1234)
nsteps <- 100
# Acceleration is normally distributed with mean macc and stdev sigacc
macc <- 0.0
sigacc <- 0.2
a <- rnorm(nsteps,macc,sigacc)
# Measurement error is Acceleration is normally distributed with mean mmes and stdev sigmes
mmes <- 0.0
sigmes <- 1.2
# Physics
dt <- 0.2
G <- c(0.5*dt^2,dt)
Q <- G %*% t(G) * sigacc^2
F <- matrix(c(1,0,dt,1),2,2)
H <- t(as.matrix(c(1,0)))
# Now building
x <- 0
v <- 0.5
for (i in 1:(nsteps-1)){
cxv <- c(x[i],v[i])
nxv <- F %*% cxv + G*a[i]
x <- c(x,nxv[1])
v <- c(v,nxv[2])
}
xar <- t(matrix(c(x,v),nsteps,2)) # hidden state
v <- rnorm(nsteps,mmes,sigmes)  # measurment noise
zar <- H%*%xar + v         # visible state
t <- (0:(nsteps-1))*dt
xm <- data.frame(t=t,x=xar[1,],v=xar[2,],z=zar[1,])
par(mfrow=c(3,1))
plot(t,a,type="l",main="Acceleration",col="red")
plot(t,xm$v,type="l",main="Velocity",col="green")
plot(t,xm$z,type="p",main="Position",col="pink")
lines(t,xm$x,col="purple")
legx <- 0
legy <- (min(xm$x)+max(xm$x))/2
legend(legx,legy, legend=c("True", "Measured"), col=c("blue", "pink"), lty=1:2, cex=0.8)
x0 <- matrix(c(0,0),2,1)        # aprior we start at 0,0
p0 <- matrix(c(0,0,0,0),2,2)    # since we are sure of this, our initial cov estimates are zero too
xhar <- array(x0,dim=c(2,1,1))
phar <- array(p0,dim=c(2,2,1))
iv <- 0
ivhat <- 0
for (i in 1:nsteps){
x0 <- F%*%xhar[,1,i]
y <- zar[i] - H%*%xhar[,1,i]
s <- sigmes + H%*%p0%*%t(H)
p0 <- F%*%p0%*%t(F) + Q
# Update
k <- p0%*%t(H)%*%solve(s)
x1 <- x0 + k%*%y
p1 <- p0 - k%*%H%*%p0
yhat <- zar[i] - H%*%x1
# Squirel them away
ivhat <-  c(ivhat,y)
iv <- c(iv,y)
x <- array(x1,dim=c(2,1,1))
p <- array(p1,dim=c(2,2,1))
xhar <- abind(xhar,x,along=3)
phar <- abind(phar,p,along=3)
x0 <- x1
p0 <- p1
}
xm$predx <- xhar[1,1,1:nsteps]
xm$iv <- iv[1:nsteps]
xm$ivhat <- ivhat[1:nsteps]
plot(t,xm$z,type="p",main="Position",col="pink")
lines(t,xm$x,col="blue")
lines(t,xm$predx,col="darkgreen")
#lines(t,xm$iv,col="brown")
legx <- 0
legy <- (min(xm$x)+max(xm$x))/2
legend(legx,legy, legend=c("True", "Measured","Kalman Guess"), col=c("blue", "pink","darkgreen"), lty=c(1,2,1), cex=0.8)
xm$predx <- xhar[1,1,1:nsteps]
xm$iv <- iv[1:nsteps]
xm$ivhat <- ivhat[1:nsteps]
plot(t,xm$z,type="p",main="Position",col="pink")
lines(t,xm$x,col="blue")
lines(t,xm$predx,col="darkgreen")
#lines(t,xm$iv,col="brown")
legx <- 0
legy <- 0.5*(min(xm$x)+max(xm$x))/2
legend(legx,legy, legend=c("True", "Measured","Kalman Guess"), col=c("blue", "pink","darkgreen"), lty=c(1,2,1), cex=0.8)
xm$predx <- xhar[1,1,1:nsteps]
xm$iv <- iv[1:nsteps]
xm$ivhat <- ivhat[1:nsteps]
plot(t,xm$z,type="p",main="Position",col="pink")
lines(t,xm$x,col="blue")
lines(t,xm$predx,col="darkgreen")
#lines(t,xm$iv,col="brown")
legx <- 0
legy <- 0.1*(min(xm$x)+max(xm$x))/2
legend(legx,legy, legend=c("True", "Measured","Kalman Guess"), col=c("blue", "pink","darkgreen"), lty=c(1,2,1), cex=0.8)
xm$predx <- xhar[1,1,1:nsteps]
xm$iv <- iv[1:nsteps]
xm$ivhat <- ivhat[1:nsteps]
plot(t,xm$z,type="p",main="Position",col="pink")
lines(t,xm$x,col="blue")
lines(t,xm$predx,col="darkgreen")
#lines(t,xm$iv,col="brown")
legx <- 0
legy <- 1
legend(legx,legy, legend=c("True", "Measured","Kalman Guess"), col=c("blue", "pink","darkgreen"), lty=c(1,2,1), cex=0.8)
xm$predx <- xhar[1,1,1:nsteps]
xm$iv <- iv[1:nsteps]
xm$ivhat <- ivhat[1:nsteps]
plot(t,xm$z,type="p",main="Position",col="pink")
lines(t,xm$x,col="blue")
lines(t,xm$predx,col="darkgreen")
#lines(t,xm$iv,col="brown")
legx <- 0
legy <- 2
legend(legx,legy, legend=c("True", "Measured","Kalman Guess"), col=c("blue", "pink","darkgreen"), lty=c(1,2,1), cex=0.8)
24*0.075
24*0.075*30
24*0.015*30
56.7 - 37.5
library(dplyr)
library(ggplot2)
library(scales)
set.seed(12345)
df_example = data_frame(Month = rep(seq.Date(as.Date("2015-01-01"),
as.Date("2015-12-31"), by = "month"), 2),
Value = sample(seq.int(30, 150), size = 24, replace = TRUE),
Indicator = as.factor(rep(c(1, 2), each = 12)))
df_example %>%
group_by(Month) %>%
mutate(`Relative Value` = Value/sum(Value)) %>%
ungroup() %>%
ggplot(aes(x = Month, y = Value, fill = Indicator, group = Indicator)) +
geom_bar(position = "fill", stat = "identity") +
theme_bw()+
scale_y_continuous(labels = percent_format()) +
geom_line(aes(x = Month, y = `Relative Value`,linetype=Indicator)) +
scale_linetype_manual(values=c("1"="solid","2"="blank"))
setwd("D:/R-Experiments/Room")
library(png)
library(rjson)
par(mar=c(2,2,2,2))
#Replace the directory and file information with your info
ima <- readPNG("DE-BHO-4-reducedTo33pct.png")
xlim <- c(39.015,-43.448)
ylim <- c(-22.3,25.63)
# Rooms
addroomtojson <- function(roomlist,newroom) {
nl <- length(roomlist$list)
roomlist$list[nl+1] <- list(newroom)
return(roomlist)
}
makeroom <- function (roomname){
t <- Sys.time()
attr(t,"tzone") <- "UTC"
newroom <- list()
newroom[["name"]] <- roomname
newroom[["r-created"]] <- format(t,"%Y-%m-%d %H:%M:%S %Z")
newroom[["pts"]] <- list(list("list"=list()))
return(newroom)
}
addpttoroom <- function (room,pt,ptclass){
nl <- length(room[["pts"]]$list)
room[["pts"]]$list[nl+1] <- list(list("class"=ptclass,"pt"=pt))
return(room)
}
# Walls
addwalltojson <- function(walllist,newwall) {
nl <- length(walllist$list)
walllist$list[nl+1] <- list(newwall)
return(walllist)
}
makewall <- function (wallname){
t <- Sys.time()
attr(t,"tzone") <- "UTC"
newwall <- list()
newwall[["name"]] <- wallname
newwall[["r-created"]] <- format(t,"%Y-%m-%d %H:%M:%S %Z")
newwall[["pts"]] <- list(list("list"=list()))
return(newwall)
}
addpttowall <- function (wall,pt,ptclass){
nl <- length(wall[["pts"]]$list)
wall[["pts"]]$list[nl+1] <- list(list("class"=ptclass,"pt"=pt))
return(wall)
}
readblddata <- function(fname){
blddatalst <- fromJSON(paste(readLines(fname), collapse=""))
}
writeblddata <- function(blddatalst,fname){
writeLines(toJSON(blddatalst),fname)
}
bdlst <- readblddata("gen_bho_x.json")
#Test Rooms
testWritingJsonData <- function(bld_data_list){
room1 <- makeroom("room1")
pt <- c("x" = 1, "y" = 2, "z" = 3)
room1 <- addpttoroom(room1,pt,"w")
room1 <- addpttoroom(room1,pt+1,"w")
room2 <- makeroom("room2")
room2 <- addpttoroom(room2,pt+2,"d")
room3 <- makeroom("room3")
bld_data_list$rooms <- addroomtojson(bld_data_list$rooms, room1 )
bld_data_list$rooms <- addroomtojson(bld_data_list$rooms, room2 )
bld_data_list$rooms <- addroomtojson(bld_data_list$rooms, room3 )
#Test Walls
wall1 <- makewall("wall1")
pt <- c("x" = 1, "y" = 2, "z" = 3)
wall1 <- addpttowall(wall1,pt,"w")
wall1 <- addpttowall(wall1,pt+1,"w")
wall2 <- makewall("wall2")
wall2 <- addpttowall(wall2,pt+2,"d")
wall3 <- makewall("wall3")
bld_data_list$walls <- addwalltojson(bld_data_list$walls, wall1 )
bld_data_list$walls <- addwalltojson(bld_data_list$walls, wall2 )
bld_data_list$walls <- addwalltojson(bld_data_list$walls, wall3 )
writeblddata(bld_data_list,"new_gen_bho_x.json")
return (bld_data_list)
}
bdlst1 <- testWritingJsonData(bdlst)
nodevek <- unlist(bdlst1$nodes$list)
nodedf <- data.frame(t(matrix(unlist(nodevek),nrow=4)))
names(nodedf) <- names(nodevek)[1:4]
idxfd <- which(grepl("FrontDesk",nodedf$name))
# rotate -90 degrees
tmp <- nodedf$pt.x
nodedf$pt.x <- nodedf$pt.z
nodedf$pt.z <- tmp
nodedf$pt.x <- as.numeric(as.character(nodedf$pt.x))
nodedf$pt.y <- as.numeric(as.character(nodedf$pt.y))
nodedf$pt.z <- as.numeric(as.character(nodedf$pt.z))
linkvek <- unlist(bdlst1$links$list)
ldf <- data.frame(t(matrix(unlist(linkvek),nrow=3)))
names(ldf) <- names(linkvek)[1:3]
ldf$nn1 <- match(ldf$n1,nodedf$name)
ldf$nn1.pt.x <- nodedf$pt.x[ldf$nn1]
ldf$nn1.pt.y <- nodedf$pt.y[ldf$nn1]
ldf$nn1.pt.z <- nodedf$pt.z[ldf$nn1]
ldf$nn2 <- match(ldf$n2,nodedf$name)
ldf$nn2.pt.x <- nodedf$pt.x[ldf$nn2]
ldf$nn2.pt.y <- nodedf$pt.y[ldf$nn2]
ldf$nn2.pt.z <- nodedf$pt.z[ldf$nn2]
plotthings <- function(ima,ldf){
#Set up the plot area
plot(1:2, type='n', main="Rooms", xlab="x", ylab="y",xlim=xlim,ylim=ylim,col="blue",asp=1)
#Get the plot information so the image will fill the plot box, and draw it
lim <- par()
#rasterImage(ima, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
rasterImage(ima, xlim[1], ylim[1], xlim[2], ylim[2])
grid()
points(nodedf$pt.x,nodedf$pt.z, col="blue")
lx <- c(xlim[1],xlim[1],xlim[2],xlim[2],xlim[1] )
ly <- c(ylim[1],ylim[2],ylim[2],ylim[1],ylim[1] )
lines(lx,ly, lwd=1, col="green")
for (i in 1:nrow(ldf)){
lx <- c(ldf$nn1.pt.x[i],ldf$nn2.pt.x[i])
ly <- c(ldf$nn1.pt.z[i],ldf$nn2.pt.z[i])
lines(lx,ly, lwd=1, col="pink")
}
plotthings(ima,ldf)
# HoloLens Log Processing
# read in lines
readPosFromLog <- function( fname ){
lines <- readLines(fname)
poslines <- lines[grepl("Pos\\:\\(",lines)]
poslines <- gsub("Pos\\:\\(",",",poslines)
poslines <- gsub("\\) Fwd\\:\\(",",",poslines)
poslines <- gsub("\\) Up\\:\\(",",",poslines)
poslines <- gsub("\\)","",poslines)
df <- read.csv(text=poslines)
names(df) <- c("t","pos.x","pos.y","pos.z","fwd.x","fwd.y","fwd.z","up.x","up.y","up.z")
return(df)
}
transform <- function(df,org.x,org.z,rotdeg,trn.x,trn.z){
rotrad <- pi*rotdeg/180
s <- sin(rotrad)
c <- cos(rotrad)
px <- df$pos.x - org.x
pz <- df$pos.z - org.z
df$pos.x <- px*c - pz*s  + trn.x
df$pos.z <- px*s + pz*c  + trn.z
return(df)
}
df1 <- readPosFromLog("birdblobs/hlbirdlog-20171020T115347UTC")
df1 <- transform(df1,0,0,77,0,3.1)
df1$pos.z <- - df1$pos.z
df2 <- readPosFromLog("birdblobs/hlbirdlog-20171020T115841UTC")
df2$pos.z <- - df2$pos.z
df1 <- transform(df1,0,0,112,-23,6)
df2 <- transform(df2,0,0,112,-23,6)
lines(df1$pos.x,df1$pos.z,col="purple")
lines(df2$pos.x,df2$pos.z,col="blue")
version()
